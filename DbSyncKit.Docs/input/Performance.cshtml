﻿Title: DbSyncKit Performance
Order: 1
BreadcrumbTitle: Performance
ShowInNavigation: false
ShowInSidebar: false
NoSidebar: true
Xref: performance
---



<head>
    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <section>
        <h2>Performance Summary</h2>
        <p>This table summarizes the performance metrics for different tables in the DbSyncKit library. The values represent the mean execution time, error, and standard deviation obtained from the benchmarks.</p>
        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Table</th>
                        <th>Mean </th>
                        <th>Error</th>
                        <th>StdDev</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Album</td>
                        <td>1,674.4 &mu;s</td>
                        <td>28.49 &mu;s</td>
                        <td>26.65 &mu;s</td>
                    </tr>
                    <tr>
                        <td>Artist</td>
                        <td>1,243.9 &mu;s</td>
                        <td>24.52 &mu;s</td>
                        <td>22.93 &mu;s</td>
                    <tr>
                        <td>Customer</td>
                        <td>1,044.3 &mu;s</td>
                        <td>20.03 &mu;s</td>
                        <td>18.74 &mu;s</td>
                    </tr>
                    <tr>
                        <td>Employee</td>
                        <td>587.4 &mu;s</td>
                        <td>10.17 &mu;s</td>
                        <td>9.51 &mu;s</td>
                    </tr>
                    <tr>
                        <td>Genre</td>
                        <td>485.8 &mu;s</td>
                        <td>7.90 &mu;s</td>
                        <td>7.00 &mu;s</td>
                    </tr>
                    <tr>
                        <td>Invoice</td>
                        <td>3,407.5 &mu;s</td>
                        <td>64.61 &mu;s</td>
                        <td>60.44 &mu;s</td>
                    </tr>
                    <tr>
                        <td>InvoiceLine</td>
                        <td>10,751.2 &mu;s</td>
                        <td>60.62 &mu;s</td>
                        <td>56.70 &mu;s</td>
                    </tr>
                    <tr>
                        <td>MediaType</td>
                        <td>412.0 &mu;s</td>
                        <td>6.29 &mu;s</td>
                        <td>5.88 &mu;s</td>
                    </tr>
                    <tr>
                        <td>Playlist</td>
                        <td>455.4 &mu;s</td>
                        <td>8.17 &mu;s</td>
                        <td>7.64 &mu;s</td>
                    </tr>
                    <tr>
                        <td>PlaylistTrack</td>
                        <td>37,480.4 &mu;s</td>
                        <td>553.74 &mu;s</td>
                        <td>517.97 &mu;s</td>
                    </tr>
                    <tr>
                        <td>Track</td>
                        <td>26,050.1 &mu;s</td>
                        <td>324.72 &mu;s</td>
                        <td>303.75 &mu;s</td>
                    </tr>
                </tbody>
            </table>
        <div/>
        <div>
            <span> Note: 1 &micro;s is equal to 1 microsecond (0.000001 seconds).</s>
        </div>
    
    </section>

    <section class="py-5">
        <h2>Method Comparison - Package Version 0.2.x vs 0.3</h2>

        <p>
            The following table compares the mean execution time for each method between Package Version 0.2.x and the new 0.3 release. The values represent the performance differences observed between the two versions.
        </p>

        <div class="table-responsive">
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Table</th>
                        <th>Mean 0.2.x</th>
                        <th>Mean 0.3</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Album</td>
                        <td>1,704.1 us</td>
                        <td>1,674.4 us</td>
                    </tr>
                    <tr>
                        <td>Artist</td>
                        <td>1,280.0 us</td>
                        <td>1,243.9 us</td>
                    </tr>
                    <tr>
                        <td>Customer</td>
                        <td>1,050.5 us</td>
                        <td>1,044.3 us</td>
                    </tr>
                    <tr>
                        <td>Employee</td>
                        <td>579.1 us</td>
                        <td>587.4 us</td>
                    </tr>
                    <tr>
                        <td>Genre</td>
                        <td>474.5 us</td>
                        <td>485.8 us</td>
                    </tr>
                    <tr>
                        <td>Invoice</td>
                        <td>3,614.9 us</td>
                        <td>3,407.5 us</td>
                    </tr>
                    <tr>
                        <td>InvoiceLine</td>
                        <td>11,601.0 us</td>
                        <td>10,751.2 us</td>
                    </tr>
                    <tr>
                        <td>MediaType</td>
                        <td>410.8 us</td>
                        <td>412.0 us</td>
                    </tr>
                    <tr>
                        <td>Playlist</td>
                        <td>452.9 us</td>
                        <td>455.4 us</td>
                    </tr>
                    <tr>
                        <td>PlaylistTrack</td>
                        <td>41,430.9 us</td>
                        <td>37,480.4 us</td>
                    </tr>
                    <tr>
                        <td>Track</td>
                        <td>27,842.0 us</td>
                        <td>26,050.1 us</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </section>


    <section class="py-5">
        <h2>Performance Graph</h2>

        <!-- Add canvas for Chart.js to render the bar chart -->
        <canvas id="benchmarkChart" width="600" height="400"></canvas>

        <!-- Script to populate and render the chart -->
        <script>
            var ctx = document.getElementById('benchmarkChart').getContext('2d');

            var chartData = {
                labels: ['Album', 'Artist', 'Customer', 'Employee', 'Genre', 'Invoice', 'InvoiceLine', 'MediaType', 'Playlist', 'PlaylistTrack', 'Track'],
                datasets: [{
                    label: 'Mean Execution Time (us)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    data: [1674.4, 1243.9, 1044.3, 587.4, 485.8, 3407.5, 10751.2, 412.0, 455.4, 37480.4, 26050.1] // Replace with your actual benchmark results
                }]
            };

            var chartOptions = {
                scales: {
                    y: {
                        beginAtZero: false,
                        stepSize: 1000,
                        max: 30000,
                    },
                    x: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Tables' // Your x-axis label
                        }
                    }],
                }
            };

            var myChart = new Chart(ctx, {
                type: 'bar',
                data: chartData,
                options: chartOptions
            });
        </script>
    </section>

    <section>
        <h2>Data Source</h2>

        <p>
            The benchmark results are obtained using the DbSyncKit library with the
            <a href="https://github.com/lerocha/chinook-database">Chinook database</a> as the data source. The Chinook database has been used for comparison purposes,
            and some edits may have been made to the original data for testing and optimization purposes. Please note that the benchmark results may vary based on the specific configuration and data characteristics of your environment.
        </p>

        <p>
            Additionally, for database migration testing, the following migration links are provided:
        </p>

        <ul>
            <li>
                <strong>For MSSQL:</strong>
                <a href="https://github.com/RohitM-IN/DbSyncKit/tree/master/DbSyncKit.Test/MSSQL/Migrations/MSSQL">
                    MSSQL Migrations
                </a>
            </li>
            <li>
                <strong>For MySQL:</strong>
                <a href="https://github.com/RohitM-IN/DbSyncKit/tree/master/DbSyncKit.Test/MySQL/Migrations">
                    MySQL Migrations
                </a>
            </li>
        </ul>
    </section>


    </body>